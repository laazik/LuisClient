/* 
 * LUIS Endpoint API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable UnusedMember.Global
namespace Ee.Rockit.LuisClient.Api
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using RestSharp;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using System.IO;
    using Ee.Rockit.LuisClient.Client;
    using Ee.Rockit.LuisClient.Model;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    /// <seealso cref="Ee.Rockit.LuisClient.Api.ILuisApi" />
    public partial class LuisApi : ILuisApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        public string AppId { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LuisApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LuisApi(String basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if(null == Configuration.ApiClient.Configuration)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LuisApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LuisApi(Configuration configuration = null)
        {
            if(null == configuration) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if(null == Configuration.ApiClient.Configuration)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <inheritdoc />
        public String GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <inheritdoc />
        public Configuration Configuration { get; set; }

        /// <inheritdoc />
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if(_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the predictions from endpoint asynchronously.
        /// </summary>
        /// <param name="request"><see cref="RequestDTO"/>Request data container.</param>
        /// <param name="method"><see cref="Method"/>Method to use for accessing the API, both GET and POST are supported.</param>
        /// <returns></returns>
        /// <exception cref="ApiException">
        /// 400 - Missing required parameter 'appId' when calling LuisApi->V20ResponseGetPredictionsFromEndpointPost
        /// or
        /// 400 - Missing required parameter 'q' when calling LuisApi->V20ResponseGetPredictionsFromEndpoint
        /// or
        /// 400 - The method used is not GET or POST. Not supported.
        /// </exception>
        public async Task<ApiResponse<Prediction>> GetPredictionsFromEndpointAsync(RequestDTO request, Method method = Method.GET)
        {
            // verify the required parameter 'appId' is set
            if(string.IsNullOrEmpty(request.AppId) && string.IsNullOrEmpty(AppId))
            {
                throw new ApiException(400, "Missing required parameter 'appId' when calling LuisApi->V20ResponseGetPredictionsFromEndpointPost");
            }

            // verify the required parameter 'q' is set
            if(string.IsNullOrEmpty(request.Query))
            {
                throw new ApiException(400, "Missing required parameter 'q' when calling LuisApi->V20ResponseGetPredictionsFromEndpoint");
            }

            var localVarPath = "/{appId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            SetHeaderParameters(localVarHeaderParams);

            SetPathParameters(request, localVarPathParams);

            SetQueryParameters(request, localVarQueryParams);

            if(Method.POST == method)
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request.Query); // http body (model) parameter
            }
            else if(Method.GET == method)
            {
                localVarQueryParams.Add("q",
                    Configuration.ApiClient.ParameterToString(request.Query)); // query parameter
            }
            else
            {
                throw new ApiException(400, "The method used is not GET or POST. Not supported.");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                method,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarPathParams,
                localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            Exception exception = ExceptionFactory?.Invoke("GetPredictionsFromEndpointAsync", localVarResponse);
            if(exception != null)
            {
                throw exception;
            }

            Prediction returnData;

            using(var reader = new JsonTextReader(new StringReader(localVarResponse.Content)))
            {
                returnData = JsonSerializer.CreateDefault().Deserialize<Prediction>(reader);
            }

            return new ApiResponse<Prediction>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                returnData);
        }

        private void SetPathParameters(RequestDTO request, Dictionary<string, string> localVarPathParams)
        {
            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            if(!string.IsNullOrEmpty(request.AppId))
            {
                localVarPathParams.Add("appId",
                    Configuration.ApiClient.ParameterToString(request.AppId)); // path parameter    
            }
            else
            {
                localVarPathParams.Add("appId",
                    Configuration.ApiClient.ParameterToString(AppId)); // path parameter    
            }

        }

        private void SetHeaderParameters(Dictionary<string, string> localVarHeaderParams)
        {
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if(localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (apiKeyHeader) required
            if(!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key")))
            {
                localVarHeaderParams["Ocp-Apim-Subscription-Key"] =
                    this.Configuration.GetApiKeyWithPrefix("Ocp-Apim-Subscription-Key");
            }
        }

        private void SetQueryParameters(RequestDTO request, Dictionary<string, string> localVarQueryParams)
        {
            if(request.TimezoneOffset != null)
            {
                localVarQueryParams.Add("timezoneOffset",
                    Configuration.ApiClient.ParameterToString(request.TimezoneOffset)); // query parameter
            }

            if(request.Verbose != null)
            {
                localVarQueryParams.Add("verbose",
                    Configuration.ApiClient.ParameterToString(request.Verbose)); // query parameter
            }

            if(request.SpellCheck != null)
            {
                localVarQueryParams.Add("spellCheck",
                    Configuration.ApiClient.ParameterToString(request.SpellCheck)); // query parameter
            }

            if(request.Staging != null)
            {
                localVarQueryParams.Add("staging",
                    Configuration.ApiClient.ParameterToString(request.Staging)); // query parameter
            }

            // authentication (apiKeyQuery) required
            if(!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("subscription-key")))
            {
                localVarQueryParams["subscription-key"] = Configuration.GetApiKeyWithPrefix("subscription-key");
            }
        }
    }
}

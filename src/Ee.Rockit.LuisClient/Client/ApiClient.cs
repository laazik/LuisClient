/* 
 * LUIS Endpoint API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
namespace Ee.Rockit.LuisClient.Client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using RestSharp;

    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    public partial class ApiClient
    {
        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(IRestRequest request);

        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(IRestRequest request, IRestResponse response);

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration and base path (https://westus.api.cognitive.microsoft.com/luis/v2.0/apps).
        /// </summary>
        public ApiClient()
        {
            Configuration = Configuration.Default;
            RestClient = new RestClient("https://westus.api.cognitive.microsoft.com/luis/v2.0/apps");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default base path (https://westus.api.cognitive.microsoft.com/luis/v2.0/apps).
        /// </summary>
        /// <param name="config">An instance of Configuration.</param>
        // ReSharper disable once UnusedMember.Global
        public ApiClient(Configuration config = null)
        {
            Configuration = config ?? Configuration.Default;

            RestClient = new RestClient("https://westus.api.cognitive.microsoft.com/luis/v2.0/apps");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        /// <param name="basePath">The base path.</param>
        public ApiClient(String basePath = "https://westus.api.cognitive.microsoft.com/luis/v2.0/apps")
        {
            if(String.IsNullOrEmpty(basePath))
            {
                throw new ArgumentException("basePath cannot be empty");
            }

            RestClient = new RestClient(basePath);
            Configuration = Configuration.Default;
        }

        /// <summary>
        /// Gets or sets the Configuration.
        /// </summary>
        /// <value>An instance of the Configuration.</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Gets or sets the RestClient.
        /// </summary>
        /// <value>An instance of the RestClient</value>
        // ReSharper disable once MemberCanBePrivate.Global
        // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Global
        public RestClient RestClient { get; set; }

        // Creates and sets up a RestRequest prior to a call.
        private RestRequest PrepareRequest(
            String path,
            Method method, 
            Dictionary<String, String> queryParams, 
            Object postBody,
            Dictionary<String, String> headerParams, 
            Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = new RestRequest(path, method);

            // add path parameter, if any
            foreach(var param in pathParams)
            {
                request.AddParameter(param.Key, EscapeString(param.Value), ParameterType.UrlSegment);
            }

            // add header parameter, if any
            foreach(var param in headerParams)
            {
                request.AddHeader(param.Key, param.Value);
            }

            // add query parameter, if any
            foreach(var param in queryParams)
            {
                request.AddQueryParameter(param.Key, EscapeString(param.Value));
            }

            if(postBody != null) // http body (model or byte[]) parameter
            {
                if(postBody is string)
                {
                    request.AddParameter("application/json", postBody, ParameterType.RequestBody);
                }
                else if(postBody.GetType() == typeof(byte[]))
                {
                    request.AddParameter(contentType, postBody, ParameterType.RequestBody);
                }
            }

            return request;
        }

        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content type.</param>
        /// <returns>The Task instance.</returns>
        public async System.Threading.Tasks.Task<Object> CallApiAsync(
            String path,
            Method method, 
            Dictionary<String, String> queryParams, 
            Object postBody,
            Dictionary<String, String> headerParams, 
            Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, 
                method, 
                queryParams, 
                postBody, 
                headerParams, 
                pathParams, 
                contentType);
            InterceptRequest(request);

            var response = await GetResponseContentAsync(request);

            InterceptResponse(request, response);
            return response;
        }

        private Task<IRestResponse> GetResponseContentAsync(IRestRequest request)
        {
            var tcs = new TaskCompletionSource<IRestResponse>();
            RestClient.ExecuteAsync(request, response =>
            {
                tcs.SetResult(response);
            });

            return tcs.Task;
        }

        /// <summary>
        /// Escape string (url-encoded).
        /// </summary>
        /// <param name="str">String to be escaped.</param>
        /// <returns>Escaped string.</returns>
        private string EscapeString(string str)
        {
            return UrlEncode(str);
        }

        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public string ParameterToString(object obj)
        {
            if(obj is DateTime dt)
            {
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dt.ToString(Configuration.DateTimeFormat);
            }

            if(obj is DateTimeOffset dto)
            {
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dto.ToString(Configuration.DateTimeFormat);
            }

            if (!(obj is IList list))
            {
                return Convert.ToString(obj);
            }

            var flattenedString = new StringBuilder();
            foreach(object param in list)
            {
                if(flattenedString.Length > 0)
                {
                    flattenedString.Append(",");
                }

                flattenedString.Append(param);
            }
            return flattenedString.ToString();
        }

        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>JSON string.</returns>
        public String Serialize(object obj)
        {
            try
            {
                return obj != null ? JsonConvert.SerializeObject(obj) : null;
            }
            catch(Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }

        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public String SelectHeaderContentType(String[] contentTypes)
        {
            if(contentTypes.Length == 0)
            {
                return null;
            }

            if(contentTypes.Contains("application/json", StringComparer.OrdinalIgnoreCase))
            {
                return "application/json";
            }

            return contentTypes[0]; // use the first content type specified in 'consumes'
        }

        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public String SelectHeaderAccept(String[] accepts)
        {
            if(accepts.Length == 0)
            {
                return null;
            }

            if(accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
            {
                return "application/json";
            }

            return String.Join(",", accepts);
        }

        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">String to be URL encoded</param>
        /// <returns>Byte array</returns>
        private static string UrlEncode(string input)
        {
            const int maxLength = 32766;

            if(input == null)
            {
                throw new ArgumentNullException(nameof(input));
            }

            if(input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }

            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;

            while(index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);

                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }

            return sb.ToString();
        }
    }
}
